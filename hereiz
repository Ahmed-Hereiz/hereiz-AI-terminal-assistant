#!/bin/bash

log() {
    local script_name=$(basename "$0")
    local command_executed="$0 $*"
    local exit_status=$?

    ./log.sh "$1" "$2" "$script_name" "$exit_status"
}

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -h, --help                                 Display this help message"
    echo "  -m, --main 'querstion'                     Query main agent that is capable of choosing what tool to use"
    echo "  -a, --ask 'question'                       Ask a question to the model (without memory) "
    echo "  -aH --ask-with-humanfeedback 'question'    Ask a question to the model with feedback loop with the human "
    echo "  -c, --chat 'question'                      chat to the model (has memory file)"
    echo "  -s, --search 'query'                       Perform a search query which searches and summarize results"
    echo "  -fs, --fullsearch 'query'                  Perform a full search where it scrapes many links at same time "
    echo "  -G,  --generate                            used to generate content using generative AI models "
    echo "  -t  'template_name'                        Show txt inside a specific template file 'template_name'"
    echo "  -tl                                        Show list of templates found"
    echo "  -memshow, --memory_show 'memory_name'      Show Chat model memory"
    echo "  -memclr, --memory_clear 'memory_name'      Clear Chat model memory"
    echo "  -memlst, --memory_list                     show list of memory files found" 
    echo "  -searchshow, --search_show                 show the search history"
    echo "  -searchclr, --search_clear                 Clear the search history"
    echo "  -viewlogs                                  View the log file"
    echo "  -clrlogs                                   Clear the log file"
}

if [ "$#" -eq 0 ]; then
    usage
    log "ERROR" "No options provided"
    echo  echo "Usage: $0 [--ask|-a 'your question to model'] [--searchopen|--so 'your search query'] [--search|--s 'your search query'] [--sso 'your search query']"
    exit 1
elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    usage
    exit 0
fi

log "INFO" "Script started with options: $*"

clrlogs_flag=0

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --main|-m)
            shift
            log "INFO" "Running main with input: '$1'"
            bash ./scripts/run_main.sh "$1" || { log "ERROR" "Failed to run ask with input: '$1'"; exit 1; }
            ;;
        --ask|-a)
            shift
            log "INFO" "Running ask with input: '$1'"
            bash ./scripts/run_ask.sh "$1" || { log "ERROR" "Failed to run ask with input: '$1'"; exit 1; }
            ;;
        -aH)
            shift
            if [[ $# -gt 0 ]]; then
                log "INFO" "Running ask with feedback input: '$1'"
                bash ./scripts/run_askfeedback.sh "$1" || { log "ERROR" "Failed to run askfeedback with input: '$1'"; exit 1; }
            else
                log "ERROR" "No input provided for -aH"
                exit 1
            fi
            ;;
        --chat|-c)
            shift
            log "INFO" "Running chat with input: '$1'"
            bash ./scripts/run_chat.sh "$1" || { log "ERROR" "Failed to run chat with input: '$1'"; exit 1; }
            ;;
        --search|-s|--fullsearch|-fs)
            shift
            log "INFO" "Running search with option: '$key' and query: '$1'"
            bash ./scripts/run_search.sh "$key" "$1" || { log "ERROR" "Failed to run search with option: '$key' and query: '$1'"; exit 1; }
            ;;
        -G|--generate)
            shift
            log "INFO" "Running generate with option: '$key' and query: '$1'"
            bash ./scripts/run_generate.sh "$1" || { log "ERROR" "Failed to run search with option: '$key' and query: '$1'"; exit 1; }
            ;;
        --screen|-w)
            shift
            log "INFO" "Running generate with option: '$key' and query: '$1'"
            bash ./scripts/run_screen.sh "$1" || { log "ERROR" "Failed to run search with option: '$key' and query: '$1'"; exit 1; }
            ;;
        -t)
            shift
            log "INFO" "Managing templates with option: '$key' and template: '$1'"
            bash ./scripts/manage_templates.sh "$key" "$1" || { log "ERROR" "Failed to manage templates with option: '$key' and template: '$1'"; exit 1; }
            ;;
        -tl)
            log "INFO" "Showing list of templates"
            bash ./scripts/manage_templates.sh -tl || { log "ERROR" "Failed to show list of templates"; exit 1; }
            ;;
        -memshow| --memory_show | -memclr | --memory_clear)
            shift
            log "INFO" "Managing memory with option: '$key' and memory: '$1'"
            bash ./scripts/manage_memory.sh "$key" "$1" || { log "ERROR" "Failed to manage memory with option: '$key' and memory: '$1'"; exit 1; }
            ;;
        -memlst| --memory_list)
            log "INFO" "Showing list of memory files"
            bash ./scripts/manage_memory.sh "$key" "$1" || { log "ERROR" "Failed to show list of memory files"; exit 1; }
            ;;
        -searchshow| --search_show| -searchclr| --search_clear)
            log "INFO" "Managing search with option: '$key'"
            bash ./scripts/manage_search.sh "$key" || { log "ERROR" "Failed to manage search with option: '$key'"; exit 1; }
            ;;
        -viewlogs)
            log "INFO" "Viewing logs"
            bash ./scripts/manage_logs.sh "$key" || { log "ERROR" "Failed to view logs"; exit 1; }
            ;;
        -clrlogs)
            log "INFO" "Clearing logs"
            bash ./scripts/manage_logs.sh "$key" || { log "ERROR" "Failed to clear logs"; exit 1; }
            clrlogs_flag=1
            ;;
        *)

            if [[ "$1" == -* ]]; then
                log "ERROR" "Invalid option: '$1'"
                echo "Error: Invalid option '$1'. Please use a valid option or provide a query string."
                usage  
                exit 1
            elif [[ $# -eq 1 ]]; then
                log "INFO" "Running ask with input (default to -m): '$1'"
                bash ./scripts/run_main.sh "$1" || { log "ERROR" "Failed to run ask with input: '$1'"; exit 1; }
            else
                log "ERROR" "Unknown option or multiple inputs: '$key'"
                echo "Unknown option or too many inputs: $key"
                usage 
                exit 1
            fi
            ;;
    esac
    shift
done


if [ $clrlogs_flag -eq 0 ]; then
    log "INFO" "Script execution completed"
fi

exit 0
